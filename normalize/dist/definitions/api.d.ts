import { BaseModel } from './models/base.model';
export { BaseModel };
export interface IOption {
    cluster: boolean;
    port: number;
    environment: string;
    dbType: string;
    dbName: string;
    dbUser: string;
    dbPassword: string;
    dbHost: string;
    dbPort: number;
    connectionString: string;
    migrate: Object;
    routePrefix: string;
    seedDir: string;
}
export declare class API {
    options: IOption;
    server: any;
    private app;
    private port;
    db: any;
    pool: any;
    models: Array<any>;
    private schema;
    private readyCallback;
    private initialized;
    appVersion: Object;
    private cachedModels;
    constructor(options: IOption);
    private dbExistCheck(client, query);
    getDBInstance(config: any, options: any, init?: Function): Promise<{}>;
    private createDatabase(client, options);
    private configureDatabase(app, options);
    private configureMiddleware(app);
    private getSessConfig();
    private configureRoutes(app);
    private createModel(scope, key, models, base);
    bootstrap(models: any, fromBase?: boolean): any;
    private processModels(array, models, base, fn);
    private sortModels(models);
    private getFkeys(tableName);
    private configureJWT(app);
    private configureCors(app);
    private configureCron(api);
    private migrate(options);
    private handleError(app);
    private loadTennancy(db);
    private initialize(app, options);
    ready(cb: Function): void;
    importModel(name: string, schema: Object, desc?: string, customRoutes?: any, seedDir?: string): Promise<{}>;
    getModelByName(name: string): any;
    getSchema(name: string): any;
    private superAdminExistCheck();
    spawn(): any;
    listen(): any;
    restartWorkers(): void;
}
